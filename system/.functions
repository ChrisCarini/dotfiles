##
#  Additional Bash Functions
##

# Add to end of path
append_path() {
    # Trim any whitespace from the input - xargs is easy trick for this (ref: https://stackoverflow.com/a/12973694 )
    NEW_PATH=$(/bin/echo $1 | /usr/bin/xargs )

    # Remove any newlines from path before appending the new path. This seems to happen from time-to-time after exporting.
    [ -d $NEW_PATH ] && PATH="$(/bin/echo $PATH | /usr/bin/tr -d '\n'):$NEW_PATH"
}
# Add to beginning of path
prepend_path() {
  [ -d $1 ] && PATH="$1:$PATH"
}

##
# Git / SCM Related
##
git-config-repo-github() {
	git config user.name "ChrisCarini"
	git config user.email "6374067+ChrisCarini@users.noreply.github.com"
	git config commit.gpgsign true
	git config user.signingkey EE9A157DBD0CFCB7
#	git config -l | cat
}

git-sync-fork() {
  git fetch upstream
  git checkout master
  git merge upstream/master
}

# From https://stackoverflow.com/a/60303161/21599954
git-full-clone-to-shallow() {
  ORIGIN_URL=$(git remote get-url origin)
  COMMIT=$(git rev-parse HEAD)

  rm -rf .git
  git init .
  git remote add origin $ORIGIN_URL
  git fetch origin $COMMIT --depth 1
  git reset --mixed $COMMIT
}

mark_pr_ready_and_auto_merge_on_checks_complete() {
  PR="$1"

  RESULT_CODE="0"
  while [[ "$RESULT_CODE" -ne 1 ]]; do
    RESULTS=$(gh pr view --json statusCheckRollup "$PR" --template '{{range .statusCheckRollup}}{{$x := ""}}{{if eq .conclusion "SUCCESS"}}{{$x = "âœ“"}}{{else if eq .conclusion "NEUTRAL"}}{{$x = "-"}}{{else}}{{$x = "*"}}{{end}}{{tablerow $x .name .status .conclusion "\033[0K"}}{{end}}{{tablerender}}')
    LENGTH=$(echo "$RESULTS" | wc -l)
    STATUS=$(echo "$RESULTS" | \grep -v "Owner Approval" | \grep -v "SUCCESS" | \grep -v "NEUTRAL") # We don't want the results itself, just the status code
    RESULT_CODE=$?
    echo "$RESULTS"
    if [[ "$RESULT_CODE" -ne 1 ]]; then
      echo "                                                                       " # lots of spaces to clear the line
      echo "[$(date +"%Y-%m-%d %H:%M:%S")] Waiting for checks to pass on PR #$PR..."
      sleep 5
      tput cuu "$((LENGTH + 2))" # move the cursor up N+1 lines to overwrite the previous output
    fi
  done

  echo 'All checks passed!'

  echo "Marking PR Ready For Review & enabling Auto-Merge"
  gh pr ready "$PR"
  gh pr merge --auto --squash "$PR"
}

is_pr_merged() {
  PR_NUM=$1
  echo "[$(date +"%Y-%m-%d %H:%M:%S")] Checking if PR #${PR_NUM} is merged..."
  until [[ "$(gh pr view "${PR_NUM}" --json state --jq .state)" == "MERGED" ]]; do
    echo "[$(date +"%Y-%m-%d %H:%M:%S")] Waiting for PR #${PR_NUM} to be merged..."
    sleep 1
    tput cuu 1 # move the cursor up 1 line to overwrite the previous output
  done
  echo "[$(date +"%Y-%m-%d %H:%M:%S")] PR #${PR_NUM} is merged!                         " # extra space to clear prev line
}

##
# Misc
##

# See `.functions.macos` for MacOS specific (shows notification)
dingdingding() {
    tput bel;sleep 0.5;
    tput bel;sleep 0.5;
    tput bel
}

smiley() {
    if [ "$?" -eq 0 ];
    then
      echo ":)";
    else
      echo ":(";
    fi
}

# Got from SO -> https://serverfault.com/a/42382
# See `.functions.macos` for MacOS specific (shows notification)
is_host_up() {
	echo "Pinging $1 until host is up..."
	ping_cancelled=false    # Keep track of whether the loop was cancelled, or succeeded
	until ping -c1 "$1" &>/dev/null; do echo "[$(date +'%Y-%m-%d @ %H:%M:%S')] Still waiting for $1..."; done &    # The "&" backgrounds it
	trap "kill $!; ping_cancelled =true" SIGINT
	wait $!          # Wait for the loop to exit, one way or another
	trap - SIGINT    # Remove the trap, now we're done with it
	echo "Done pinging, cancelled=$ping_cancelled"
}

# Got from SO -> https://stackoverflow.com/a/29655125
perf() {
  curl -o /dev/null -s -w "%{time_connect} + %{time_starttransfer} = %{time_total}\n" "$1"
}

genpasswd() {
   local l=$1
   [ "$l" == "" ] && l=16
   tr -dc A-Za-z0-9_ < /dev/urandom | head -c ${l} | xargs
}

extract() {
  if [[ -f "$1" ]] ; then
      case "$1" in
          *.tar.bz2)   tar xvjf "$1"    ;;
          *.tar.gz)    tar xvzf "$1"    ;;
          *.bz2)       bunzip2 "$1"     ;;
          *.rar)       rar x "$1"       ;;
          *.gz)        gunzip "$1"      ;;
          *.tar)       tar xvf "$1"     ;;
          *.jar)       jar xf "$1"      ;;
          *.tbz2)      tar xvjf "$1"    ;;
          *.tgz)       tar xvzf "$1"    ;;
          *.zip)       unzip "$1"       ;;
          *.Z)         uncompress "$1"  ;;
          *.7z)        7z x "$1"        ;;
          *)           if ! 7z x "$1" ; then echo "[ERROR] Sorry, don't know how to extract '$1'..." ; fi ;;
      esac
  else
      echo "'$1' is not a valid file!"
  fi
}

# Start a local SMTP server for testing in python
smtp-server() {
  echo "SMTP Server created on 'localhost:1025' - [Ctrl] + [C] to exit."
  python -m smtpd -n -c DebuggingServer localhost:1025
}

# `lq` is an alias to convert LDIF results to a JSON blob, it's real hacky: (Thank you Luke Y! ;) )
lq () {
    awk '!/^#/' | jq -Rs '[split("\n\n")[] | select(length >0) | [split("\n")[] | {attribute: split(": ")[0], value: (split(": ")[1:] | join(": "))}] | [group_by(.attribute)[] | { key: .[0].attribute, value: [.[].value]}] | from_entries]'
}

# Convert an image into a base64 string for textual embedding in a webpage
#   - Taken from: https://codewithhugo.com/convert-image-data-url/
function img-data() {
  TYPE=$(file --mime-type -b $1)
  ENC=$(base64 $1)
  echo "data:$TYPE;base64,$ENC"
}

function mkvenv() {
  python3 -m venv venv
  ln -s venv/bin/activate activate
  source activate
  pip install --upgrade pip
  pip install pip-chill
  if [[ -f requirements.txt ]]; then
    pip install -r requirements.txt
  fi
  echo
  echo "Installed Dependencies"
  echo "======================"
  pip-chill
  echo
  echo "pip & python Paths"
  echo "=================="
  which pip python python3
}
